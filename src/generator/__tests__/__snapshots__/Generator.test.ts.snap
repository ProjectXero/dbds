// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Generator with default options generates everything 1`] = `
"export type PrimitiveValueType = string | number | boolean | null;
export type SimpleValueType = PrimitiveValueType | Date;
export type SerializableValueType = SimpleValueType | {
    [key in string]: SerializableValueType | undefined;
} | Array<SerializableValueType> | ReadonlyArray<SerializableValueType>;
export enum TestEnum {
    A = \\"A\\",
    B = \\"b\\",
    CamelCaseRules = \\"camel_case_rules\\"
}
export interface TableWithNoColumns {
}
export interface TableWithNoColumns$Insert {
}
export const TableWithNoColumns$Types: Record<keyof TableWithNoColumns, string> = {};
export interface TableWithNumericId {
    id: number;
}
export interface TableWithNumericId$Insert {
    id?: number;
}
export const TableWithNumericId$Types: Record<keyof TableWithNumericId, string> = {
    id: \\"int8\\"
};
export interface TableWithCustomTypes {
    enum_type: TestEnum;
    enum_array_type: TestEnum[];
    table_type: TableWithUuidId;
    table_array_type: TableWithUuidId[];
}
export interface TableWithCustomTypes$Insert {
    enum_type: TestEnum;
    enum_array_type: TestEnum[];
    table_type: TableWithUuidId;
    table_array_type: TableWithUuidId[];
}
export const TableWithCustomTypes$Types: Record<keyof TableWithCustomTypes, string> = {
    enum_type: \\"test_enum\\",
    enum_array_type: \\"test_enum\\",
    table_type: \\"table_with_uuid_id\\",
    table_array_type: \\"table_with_uuid_id\\"
};
export interface TableWithUuidId {
    id: string;
}
export interface TableWithUuidId$Insert {
    id?: string;
}
export const TableWithUuidId$Types: Record<keyof TableWithUuidId, string> = {
    id: \\"uuid\\"
};
export interface TableWithNullableFields {
    nullable: string | null;
    nullable_with_default: string | null;
    nullable_array: string[] | null;
    nullable_array_with_default: string[] | null;
}
export interface TableWithNullableFields$Insert {
    nullable?: string | null;
    nullable_with_default?: string | null;
    nullable_array?: string[] | null;
    nullable_array_with_default?: string[] | null;
}
export const TableWithNullableFields$Types: Record<keyof TableWithNullableFields, string> = {
    nullable: \\"text\\",
    nullable_with_default: \\"text\\",
    nullable_array: \\"text\\",
    nullable_array_with_default: \\"text\\"
};
"
`;

exports[`Generator with different case conversions properly cases members 1`] = `
"export type PrimitiveValueType = string | number | boolean | null;
export type SimpleValueType = PrimitiveValueType | Date;
export type SerializableValueType = SimpleValueType | {
    [key in string]: SerializableValueType | undefined;
} | Array<SerializableValueType> | ReadonlyArray<SerializableValueType>;
export enum TestEnum {
    A = \\"A\\",
    B = \\"b\\",
    CAMEL_CASE_RULES = \\"camel_case_rules\\"
}
export interface TableWithNoColumns {
}
export interface TableWithNoColumns$Insert {
}
export const TableWithNoColumns$Types: Record<keyof TableWithNoColumns, string> = {};
export interface TableWithNumericId {
    id: number;
}
export interface TableWithNumericId$Insert {
    id?: number;
}
export const TableWithNumericId$Types: Record<keyof TableWithNumericId, string> = {
    id: \\"int8\\"
};
export interface TableWithCustomTypes {
    enumType: TestEnum;
    enumArrayType: TestEnum[];
    tableType: TableWithUuidId;
    tableArrayType: TableWithUuidId[];
}
export interface TableWithCustomTypes$Insert {
    enumType: TestEnum;
    enumArrayType: TestEnum[];
    tableType: TableWithUuidId;
    tableArrayType: TableWithUuidId[];
}
export const TableWithCustomTypes$Types: Record<keyof TableWithCustomTypes, string> = {
    enumType: \\"test_enum\\",
    enumArrayType: \\"test_enum\\",
    tableType: \\"table_with_uuid_id\\",
    tableArrayType: \\"table_with_uuid_id\\"
};
export interface TableWithUuidId {
    id: string;
}
export interface TableWithUuidId$Insert {
    id?: string;
}
export const TableWithUuidId$Types: Record<keyof TableWithUuidId, string> = {
    id: \\"uuid\\"
};
export interface TableWithNullableFields {
    nullable: string | null;
    nullableWithDefault: string | null;
    nullableArray: string[] | null;
    nullableArrayWithDefault: string[] | null;
}
export interface TableWithNullableFields$Insert {
    nullable?: string | null;
    nullableWithDefault?: string | null;
    nullableArray?: string[] | null;
    nullableArrayWithDefault?: string[] | null;
}
export const TableWithNullableFields$Types: Record<keyof TableWithNullableFields, string> = {
    nullable: \\"text\\",
    nullableWithDefault: \\"text\\",
    nullableArray: \\"text\\",
    nullableArrayWithDefault: \\"text\\"
};
"
`;

exports[`Generator with enums enabled generates enums 1`] = `
"export type PrimitiveValueType = string | number | boolean | null;
export type SimpleValueType = PrimitiveValueType | Date;
export type SerializableValueType = SimpleValueType | {
    [key in string]: SerializableValueType | undefined;
} | Array<SerializableValueType> | ReadonlyArray<SerializableValueType>;
export enum TestEnum {
    A = \\"A\\",
    B = \\"b\\",
    CamelCaseRules = \\"camel_case_rules\\"
}
"
`;

exports[`Generator with everything disabled generates nothing 1`] = `
"export type PrimitiveValueType = string | number | boolean | null;
export type SimpleValueType = PrimitiveValueType | Date;
export type SerializableValueType = SimpleValueType | {
    [key in string]: SerializableValueType | undefined;
} | Array<SerializableValueType> | ReadonlyArray<SerializableValueType>;
"
`;

exports[`Generator with insert types enabled generates insert types 1`] = `
"export type PrimitiveValueType = string | number | boolean | null;
export type SimpleValueType = PrimitiveValueType | Date;
export type SerializableValueType = SimpleValueType | {
    [key in string]: SerializableValueType | undefined;
} | Array<SerializableValueType> | ReadonlyArray<SerializableValueType>;
export interface TableWithNoColumns$Insert {
}
export interface TableWithNumericId$Insert {
    id?: number;
}
export interface TableWithCustomTypes$Insert {
    enum_type: unknown;
    enum_array_type: unknown[];
    table_type: unknown;
    table_array_type: unknown[];
}
export interface TableWithUuidId$Insert {
    id?: string;
}
export interface TableWithNullableFields$Insert {
    nullable?: string | null;
    nullable_with_default?: string | null;
    nullable_array?: string[] | null;
    nullable_array_with_default?: string[] | null;
}
"
`;

exports[`Generator with insert types enabled generates insert types 2`] = `
Array [
  Array [
    "Unknown type detected: 'test_enum'. You have either disabled generation of the type or this is a bug.",
  ],
  Array [
    "Unknown type detected: 'test_enum'. You have either disabled generation of the type or this is a bug.",
  ],
  Array [
    "Unknown type detected: 'table_with_uuid_id'. You have either disabled generation of the type or this is a bug.",
  ],
]
`;

exports[`Generator with tables enabled generates tables 1`] = `
"export type PrimitiveValueType = string | number | boolean | null;
export type SimpleValueType = PrimitiveValueType | Date;
export type SerializableValueType = SimpleValueType | {
    [key in string]: SerializableValueType | undefined;
} | Array<SerializableValueType> | ReadonlyArray<SerializableValueType>;
export interface TableWithNoColumns {
}
export interface TableWithNumericId {
    id: number;
}
export interface TableWithCustomTypes {
    enum_type: unknown;
    enum_array_type: unknown[];
    table_type: TableWithUuidId;
    table_array_type: TableWithUuidId[];
}
export interface TableWithUuidId {
    id: string;
}
export interface TableWithNullableFields {
    nullable: string | null;
    nullable_with_default: string | null;
    nullable_array: string[] | null;
    nullable_array_with_default: string[] | null;
}
"
`;

exports[`Generator with tables enabled generates tables 2`] = `
Array [
  Array [
    "Unknown type detected: 'test_enum'. You have either disabled generation of the type or this is a bug.",
  ],
]
`;

exports[`Generator with type objects enabled generates type objects 1`] = `
"export type PrimitiveValueType = string | number | boolean | null;
export type SimpleValueType = PrimitiveValueType | Date;
export type SerializableValueType = SimpleValueType | {
    [key in string]: SerializableValueType | undefined;
} | Array<SerializableValueType> | ReadonlyArray<SerializableValueType>;
export const TableWithNoColumns$Types: Record<keyof TableWithNoColumns, string> = {};
export const TableWithNumericId$Types: Record<keyof TableWithNumericId, string> = {
    id: \\"int8\\"
};
export const TableWithCustomTypes$Types: Record<keyof TableWithCustomTypes, string> = {
    enum_type: \\"test_enum\\",
    enum_array_type: \\"test_enum\\",
    table_type: \\"table_with_uuid_id\\",
    table_array_type: \\"table_with_uuid_id\\"
};
export const TableWithUuidId$Types: Record<keyof TableWithUuidId, string> = {
    id: \\"uuid\\"
};
export const TableWithNullableFields$Types: Record<keyof TableWithNullableFields, string> = {
    nullable: \\"text\\",
    nullable_with_default: \\"text\\",
    nullable_array: \\"text\\",
    nullable_array_with_default: \\"text\\"
};
"
`;

exports[`Generator with type objects enabled generates type objects 2`] = `
Array [
  Array [
    "Unknown type detected: 'test_enum'. You have either disabled generation of the type or this is a bug.",
  ],
  Array [
    "Unknown type detected: 'test_enum'. You have either disabled generation of the type or this is a bug.",
  ],
  Array [
    "Unknown type detected: 'table_with_uuid_id'. You have either disabled generation of the type or this is a bug.",
  ],
]
`;
