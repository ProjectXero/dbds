// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Generator build when builders throw an error logs the error and rethrows 1`] = `
[
  [
    "testing error handling",
  ],
]
`;

exports[`Generator when re-registering an already-registered type outputs a warning 1`] = `
"export type PrimitiveValueType = string | number | boolean | null;
export type SimpleValueType = PrimitiveValueType | Date;
export type SerializableValueType = SimpleValueType | {
    [key in string]: SerializableValueType | undefined;
} | Array<SerializableValueType> | ReadonlyArray<SerializableValueType>;
export type MapToSerializable<T> = T extends SerializableValueType ? T : T extends Array<infer U> ? Array<MapToSerializable<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<MapToSerializable<U>> : T extends {
    [K in keyof T]: K extends string ? T[K] extends SimpleValueType ? T[K] : T[K] extends Function ? never : MapToSerializable<T[K]> : never;
} ? T : never;
export interface SomehowDuplicatedTypeName {
}
export interface SomehowDuplicatedTypeName {
}
"
`;

exports[`Generator when re-registering an already-registered type outputs a warning 2`] = `
[
  [
    "Re-registering known type 'somehow_duplicated_type_name': SomehowDuplicatedTypeName => SomehowDuplicatedTypeName",
  ],
]
`;

exports[`Generator with default options generates everything 1`] = `
"export type PrimitiveValueType = string | number | boolean | null;
export type SimpleValueType = PrimitiveValueType | Date;
export type SerializableValueType = SimpleValueType | {
    [key in string]: SerializableValueType | undefined;
} | Array<SerializableValueType> | ReadonlyArray<SerializableValueType>;
export type MapToSerializable<T> = T extends SerializableValueType ? T : T extends Array<infer U> ? Array<MapToSerializable<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<MapToSerializable<U>> : T extends {
    [K in keyof T]: K extends string ? T[K] extends SimpleValueType ? T[K] : T[K] extends Function ? never : MapToSerializable<T[K]> : never;
} ? T : never;
export enum TestEnum {
    A = "A",
    B = "b",
    CamelCaseRules = "camel_case_rules"
}
export interface TableWithNoColumns {
}
export interface TableWithNoColumns$Insert {
}
export const TableWithNoColumns$Types = {} as const;
export interface TableWithNumericId {
    id: number;
}
export interface TableWithNumericId$Insert {
    id?: number;
}
export const TableWithNumericId$Types = {
    id: "int8"
} as const;
export interface TableWithCustomTypes {
    enum_type: TestEnum;
    enum_array_type: TestEnum[];
    table_type: TableWithUuidId;
    table_array_type: TableWithUuidId[];
}
export interface TableWithCustomTypes$Insert {
    enum_type: TestEnum;
    enum_array_type: TestEnum[];
    table_type: TableWithUuidId;
    table_array_type: TableWithUuidId[];
}
export const TableWithCustomTypes$Types = {
    enum_type: "test_enum",
    enum_array_type: "test_enum",
    table_type: "table_with_uuid_id",
    table_array_type: "table_with_uuid_id"
} as const;
export interface TableWithUuidId {
    id: string;
}
export interface TableWithUuidId$Insert {
    id?: string;
}
export const TableWithUuidId$Types = {
    id: "uuid"
} as const;
export interface TableWithNullableFields {
    nullable: string | null;
    nullable_with_default: string | null;
    nullable_array: string[] | null;
    nullable_array_with_default: string[] | null;
}
export interface TableWithNullableFields$Insert {
    nullable?: string | null;
    nullable_with_default?: string | null;
    nullable_array?: string[] | null;
    nullable_array_with_default?: string[] | null;
}
export const TableWithNullableFields$Types = {
    nullable: "text",
    nullable_with_default: "text",
    nullable_array: "text",
    nullable_array_with_default: "text"
} as const;
export interface TableWithJsonJsonb<TJson = SerializableValueType, TJsonb = SerializableValueType> {
    json: MapToSerializable<TJson>;
    jsonb: MapToSerializable<TJsonb> | null;
}
export interface TableWithJsonJsonb$Insert<TJson = SerializableValueType, TJsonb = SerializableValueType> {
    json: MapToSerializable<TJson>;
    jsonb?: MapToSerializable<TJsonb> | null;
}
export const TableWithJsonJsonb$Types = {
    json: "json",
    jsonb: "jsonb"
} as const;
"
`;

exports[`Generator with different case conversions properly cases members 1`] = `
"export type PrimitiveValueType = string | number | boolean | null;
export type SimpleValueType = PrimitiveValueType | Date;
export type SerializableValueType = SimpleValueType | {
    [key in string]: SerializableValueType | undefined;
} | Array<SerializableValueType> | ReadonlyArray<SerializableValueType>;
export type MapToSerializable<T> = T extends SerializableValueType ? T : T extends Array<infer U> ? Array<MapToSerializable<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<MapToSerializable<U>> : T extends {
    [K in keyof T]: K extends string ? T[K] extends SimpleValueType ? T[K] : T[K] extends Function ? never : MapToSerializable<T[K]> : never;
} ? T : never;
export enum TestEnum {
    A = "A",
    b = "b",
    camel_case_rules = "camel_case_rules"
}
export interface TableWithNoColumns {
}
export interface TableWithNoColumns$Insert {
}
export const TableWithNoColumns$Types = {} as const;
export interface TableWithNumericId {
    id: number;
}
export interface TableWithNumericId$Insert {
    id?: number;
}
export const TableWithNumericId$Types = {
    id: "int8"
} as const;
export interface TableWithCustomTypes {
    enumType: TestEnum;
    enumArrayType: TestEnum[];
    tableType: TableWithUuidId;
    tableArrayType: TableWithUuidId[];
}
export interface TableWithCustomTypes$Insert {
    enumType: TestEnum;
    enumArrayType: TestEnum[];
    tableType: TableWithUuidId;
    tableArrayType: TableWithUuidId[];
}
export const TableWithCustomTypes$Types = {
    enumType: "test_enum",
    enumArrayType: "test_enum",
    tableType: "table_with_uuid_id",
    tableArrayType: "table_with_uuid_id"
} as const;
export interface TableWithUuidId {
    id: string;
}
export interface TableWithUuidId$Insert {
    id?: string;
}
export const TableWithUuidId$Types = {
    id: "uuid"
} as const;
export interface TableWithNullableFields {
    nullable: string | null;
    nullableWithDefault: string | null;
    nullableArray: string[] | null;
    nullableArrayWithDefault: string[] | null;
}
export interface TableWithNullableFields$Insert {
    nullable?: string | null;
    nullableWithDefault?: string | null;
    nullableArray?: string[] | null;
    nullableArrayWithDefault?: string[] | null;
}
export const TableWithNullableFields$Types = {
    nullable: "text",
    nullableWithDefault: "text",
    nullableArray: "text",
    nullableArrayWithDefault: "text"
} as const;
export interface TableWithJsonJsonb<TJson = SerializableValueType, TJsonb = SerializableValueType> {
    json: MapToSerializable<TJson>;
    jsonb: MapToSerializable<TJsonb> | null;
}
export interface TableWithJsonJsonb$Insert<TJson = SerializableValueType, TJsonb = SerializableValueType> {
    json: MapToSerializable<TJson>;
    jsonb?: MapToSerializable<TJsonb> | null;
}
export const TableWithJsonJsonb$Types = {
    json: "json",
    jsonb: "jsonb"
} as const;
"
`;

exports[`Generator with enums enabled generates enums 1`] = `
"export type PrimitiveValueType = string | number | boolean | null;
export type SimpleValueType = PrimitiveValueType | Date;
export type SerializableValueType = SimpleValueType | {
    [key in string]: SerializableValueType | undefined;
} | Array<SerializableValueType> | ReadonlyArray<SerializableValueType>;
export type MapToSerializable<T> = T extends SerializableValueType ? T : T extends Array<infer U> ? Array<MapToSerializable<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<MapToSerializable<U>> : T extends {
    [K in keyof T]: K extends string ? T[K] extends SimpleValueType ? T[K] : T[K] extends Function ? never : MapToSerializable<T[K]> : never;
} ? T : never;
export enum TestEnum {
    A = "A",
    B = "b",
    CamelCaseRules = "camel_case_rules"
}
"
`;

exports[`Generator with everything disabled generates nothing 1`] = `
"export type PrimitiveValueType = string | number | boolean | null;
export type SimpleValueType = PrimitiveValueType | Date;
export type SerializableValueType = SimpleValueType | {
    [key in string]: SerializableValueType | undefined;
} | Array<SerializableValueType> | ReadonlyArray<SerializableValueType>;
export type MapToSerializable<T> = T extends SerializableValueType ? T : T extends Array<infer U> ? Array<MapToSerializable<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<MapToSerializable<U>> : T extends {
    [K in keyof T]: K extends string ? T[K] extends SimpleValueType ? T[K] : T[K] extends Function ? never : MapToSerializable<T[K]> : never;
} ? T : never;
"
`;

exports[`Generator with insert types enabled generates insert types 1`] = `
"export type PrimitiveValueType = string | number | boolean | null;
export type SimpleValueType = PrimitiveValueType | Date;
export type SerializableValueType = SimpleValueType | {
    [key in string]: SerializableValueType | undefined;
} | Array<SerializableValueType> | ReadonlyArray<SerializableValueType>;
export type MapToSerializable<T> = T extends SerializableValueType ? T : T extends Array<infer U> ? Array<MapToSerializable<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<MapToSerializable<U>> : T extends {
    [K in keyof T]: K extends string ? T[K] extends SimpleValueType ? T[K] : T[K] extends Function ? never : MapToSerializable<T[K]> : never;
} ? T : never;
export interface TableWithNoColumns$Insert {
}
export interface TableWithNumericId$Insert {
    id?: number;
}
export interface TableWithCustomTypes$Insert {
    enum_type: unknown;
    enum_array_type: unknown[];
    table_type: unknown;
    table_array_type: unknown[];
}
export interface TableWithUuidId$Insert {
    id?: string;
}
export interface TableWithNullableFields$Insert {
    nullable?: string | null;
    nullable_with_default?: string | null;
    nullable_array?: string[] | null;
    nullable_array_with_default?: string[] | null;
}
export interface TableWithJsonJsonb$Insert<TJson = SerializableValueType, TJsonb = SerializableValueType> {
    json: MapToSerializable<TJson>;
    jsonb?: MapToSerializable<TJsonb> | null;
}
"
`;

exports[`Generator with insert types enabled generates insert types 2`] = `
[
  [
    "Unknown type detected: 'test_enum'. You have either disabled generation of the type or this is a bug.",
  ],
  [
    "Unknown type detected: 'table_with_uuid_id'. You have either disabled generation of the type or this is a bug.",
  ],
]
`;

exports[`Generator with tables enabled generates tables 1`] = `
"export type PrimitiveValueType = string | number | boolean | null;
export type SimpleValueType = PrimitiveValueType | Date;
export type SerializableValueType = SimpleValueType | {
    [key in string]: SerializableValueType | undefined;
} | Array<SerializableValueType> | ReadonlyArray<SerializableValueType>;
export type MapToSerializable<T> = T extends SerializableValueType ? T : T extends Array<infer U> ? Array<MapToSerializable<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<MapToSerializable<U>> : T extends {
    [K in keyof T]: K extends string ? T[K] extends SimpleValueType ? T[K] : T[K] extends Function ? never : MapToSerializable<T[K]> : never;
} ? T : never;
export interface TableWithNoColumns {
}
export interface TableWithNumericId {
    id: number;
}
export interface TableWithCustomTypes {
    enum_type: unknown;
    enum_array_type: unknown[];
    table_type: TableWithUuidId;
    table_array_type: TableWithUuidId[];
}
export interface TableWithUuidId {
    id: string;
}
export interface TableWithNullableFields {
    nullable: string | null;
    nullable_with_default: string | null;
    nullable_array: string[] | null;
    nullable_array_with_default: string[] | null;
}
export interface TableWithJsonJsonb<TJson = SerializableValueType, TJsonb = SerializableValueType> {
    json: MapToSerializable<TJson>;
    jsonb: MapToSerializable<TJsonb> | null;
}
"
`;

exports[`Generator with tables enabled generates tables 2`] = `
[
  [
    "Unknown type detected: 'test_enum'. You have either disabled generation of the type or this is a bug.",
  ],
]
`;

exports[`Generator with type objects enabled generates type objects 1`] = `
"export type PrimitiveValueType = string | number | boolean | null;
export type SimpleValueType = PrimitiveValueType | Date;
export type SerializableValueType = SimpleValueType | {
    [key in string]: SerializableValueType | undefined;
} | Array<SerializableValueType> | ReadonlyArray<SerializableValueType>;
export type MapToSerializable<T> = T extends SerializableValueType ? T : T extends Array<infer U> ? Array<MapToSerializable<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<MapToSerializable<U>> : T extends {
    [K in keyof T]: K extends string ? T[K] extends SimpleValueType ? T[K] : T[K] extends Function ? never : MapToSerializable<T[K]> : never;
} ? T : never;
export const TableWithNoColumns$Types = {} as const;
export const TableWithNumericId$Types = {
    id: "int8"
} as const;
export const TableWithCustomTypes$Types = {
    enum_type: "test_enum",
    enum_array_type: "test_enum",
    table_type: "table_with_uuid_id",
    table_array_type: "table_with_uuid_id"
} as const;
export const TableWithUuidId$Types = {
    id: "uuid"
} as const;
export const TableWithNullableFields$Types = {
    nullable: "text",
    nullable_with_default: "text",
    nullable_array: "text",
    nullable_array_with_default: "text"
} as const;
export const TableWithJsonJsonb$Types = {
    json: "json",
    jsonb: "jsonb"
} as const;
"
`;

exports[`Generator with type objects enabled generates type objects 2`] = `[]`;
