// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Generator generates the correct types 1`] = `
"/* eslint-disable */
import { z } from "zod";
export type PrimitiveValueType = string | number | boolean | null;
export type SimpleValueType = PrimitiveValueType | Date;
export type SerializableValueType = SimpleValueType | {
    [key in string]: SerializableValueType | undefined;
} | Array<SerializableValueType> | ReadonlyArray<SerializableValueType>;
export type MapToSerializable<T> = T extends SerializableValueType ? T : T extends Array<infer U> ? Array<MapToSerializable<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<MapToSerializable<U>> : T extends {
    [K in keyof T]: K extends string ? T[K] extends SimpleValueType ? T[K] : T[K] extends Function ? never : MapToSerializable<T[K]> : never;
} ? T : never;
export const DEFAULT = Symbol("DEFAULT");
export enum TestTypeEnum {
    Aa = "aa",
    Bb = "bb",
    Cc = "cc",
    Zzzz = "zzzz"
}
export const TestGenerationDefaults$Metadata = {
    generated_column: {
        nativeName: "generated_column",
        nativeType: "int4"
    },
    generated_id: {
        nativeName: "generated_id",
        nativeType: "int4"
    }
} as const;
export const TestGenerationDefaults$SelectSchema = z.object({
    generated_column: z.number(),
    generated_id: z.number()
});
export const TestGenerationDefaults$InsertSchema = z.object({
    generated_column: z.undefined().or(z.literal(DEFAULT)),
    generated_id: z.undefined().or(z.literal(DEFAULT))
});
export interface TestGenerationDefaults {
    generated_column: number;
    generated_id: number;
}
export interface TestGenerationDefaults$Insert {
    generated_column?: number;
    generated_id?: number;
}
export const TestGenerationDefaults$Types = {
    generated_column: "int4",
    generated_id: "int4"
} as const;
export const TestTableOrder$Metadata = {
    subsequent_table_type: {
        nativeName: "subsequent_table_type",
        nativeType: "test_table_standard"
    }
} as const;
export const TestTableOrder$SelectSchema = z.object({
    subsequent_table_type: z.lazy(() => TestTableStandard$SelectSchema.nullish())
});
export const TestTableOrder$InsertSchema = z.object({
    subsequent_table_type: z.lazy(() => TestTableStandard$InsertSchema.nullish())
});
export interface TestTableOrder {
    subsequent_table_type: TestTableStandard | null;
}
export interface TestTableOrder$Insert {
    subsequent_table_type?: TestTableStandard | null;
}
export const TestTableOrder$Types = {
    subsequent_table_type: "test_table_standard"
} as const;
export const TestTableStandard$Metadata = {
    arr_test: {
        nativeName: "arr_test",
        nativeType: "text"
    },
    caseTest_upper: {
        nativeName: "caseTest_upper",
        nativeType: "text"
    },
    casetest_lower: {
        nativeName: "casetest_lower",
        nativeType: "text"
    },
    created_at: {
        nativeName: "created_at",
        nativeType: "timestamp"
    },
    domain_test: {
        nativeName: "domain_test",
        nativeType: "text"
    },
    enum_arr_test: {
        nativeName: "enum_arr_test",
        nativeType: "test_type_enum"
    },
    enum_test: {
        nativeName: "enum_test",
        nativeType: "test_type_enum"
    },
    id: {
        nativeName: "id",
        nativeType: "int4"
    },
    jsonb_test: {
        nativeName: "jsonb_test",
        nativeType: "jsonb"
    }
} as const;
export const TestTableStandard$SelectSchema = z.object({
    arr_test: z.array(z.string()).nullish(),
    caseTest_upper: z.string().nullish(),
    casetest_lower: z.string().nullish(),
    created_at: z.date(),
    domain_test: z.string().nullish(),
    enum_arr_test: z.lazy(() => z.array(z.nativeEnum(TestTypeEnum)).nullish()),
    enum_test: z.lazy(() => z.nativeEnum(TestTypeEnum)),
    id: z.number(),
    jsonb_test: z.unknown().nullish()
});
export const TestTableStandard$InsertSchema = z.object({
    arr_test: z.array(z.string()).nullish(),
    caseTest_upper: z.string().nullish(),
    casetest_lower: z.string().nullish(),
    created_at: z.date().optional().or(z.literal(DEFAULT)),
    domain_test: z.string().nullish(),
    enum_arr_test: z.lazy(() => z.array(z.nativeEnum(TestTypeEnum)).nullish()),
    enum_test: z.lazy(() => z.nativeEnum(TestTypeEnum)),
    id: z.number().optional().or(z.literal(DEFAULT)),
    jsonb_test: z.unknown().nullish()
});
export interface TestTableStandard<TJsonbTest = SerializableValueType> {
    arr_test: string[] | null;
    caseTest_upper: string | null;
    casetest_lower: string | null;
    created_at: Date;
    domain_test: string | null;
    enum_arr_test: TestTypeEnum[] | null;
    enum_test: TestTypeEnum;
    id: number;
    jsonb_test: MapToSerializable<TJsonbTest> | null;
}
export interface TestTableStandard$Insert<TJsonbTest = SerializableValueType> {
    arr_test?: string[] | null;
    caseTest_upper?: string | null;
    casetest_lower?: string | null;
    created_at?: Date;
    domain_test?: string | null;
    enum_arr_test?: TestTypeEnum[] | null;
    enum_test: TestTypeEnum;
    id?: number;
    jsonb_test?: MapToSerializable<TJsonbTest> | null;
}
export const TestTableStandard$Types = {
    arr_test: "text",
    caseTest_upper: "text",
    casetest_lower: "text",
    created_at: "timestamp",
    domain_test: "text",
    enum_arr_test: "test_type_enum",
    enum_test: "test_type_enum",
    id: "int4",
    jsonb_test: "jsonb"
} as const;
export const TestTableTypes$Metadata = {
    id: {
        nativeName: "id",
        nativeType: "uuid"
    },
    table_arr_test: {
        nativeName: "table_arr_test",
        nativeType: "test_table_standard"
    },
    table_test: {
        nativeName: "table_test",
        nativeType: "test_table_standard"
    }
} as const;
export const TestTableTypes$SelectSchema = z.object({
    id: z.string(),
    table_arr_test: z.lazy(() => z.array(TestTableStandard$SelectSchema)),
    table_test: z.lazy(() => TestTableStandard$SelectSchema.nullish())
});
export const TestTableTypes$InsertSchema = z.object({
    id: z.string(),
    table_arr_test: z.lazy(() => z.array(TestTableStandard$InsertSchema).optional().or(z.literal(DEFAULT))),
    table_test: z.lazy(() => TestTableStandard$InsertSchema.nullish())
});
export interface TestTableTypes {
    id: string;
    table_arr_test: TestTableStandard[];
    table_test: TestTableStandard | null;
}
export interface TestTableTypes$Insert {
    id: string;
    table_arr_test?: TestTableStandard[];
    table_test?: TestTableStandard | null;
}
export const TestTableTypes$Types = {
    id: "uuid",
    table_arr_test: "test_table_standard",
    table_test: "test_table_standard"
} as const;
"
`;
