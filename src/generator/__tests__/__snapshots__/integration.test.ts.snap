// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Generator generates the correct types 1`] = `
"export type PrimitiveValueType = string | number | boolean | null;
export type SimpleValueType = PrimitiveValueType | Date;
export type SerializableValueType = SimpleValueType | {
    [key in string]: SerializableValueType | undefined;
} | Array<SerializableValueType> | ReadonlyArray<SerializableValueType>;
export type MapToSerializable<T> = T extends SerializableValueType ? T : T extends Array<infer U> ? Array<MapToSerializable<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<MapToSerializable<U>> : T extends {
    [K in keyof T]: K extends string ? T[K] extends SimpleValueType ? T[K] : T[K] extends Function ? never : MapToSerializable<T[K]> : never;
} ? T : never;
export enum TestTypeEnum {
    Aa = \\"aa\\",
    Bb = \\"bb\\",
    Cc = \\"cc\\",
    Zzzz = \\"zzzz\\"
}
export interface TestTableOrder {
    subsequent_table_type: TestTableStandard | null;
}
export interface TestTableOrder$Insert {
    subsequent_table_type?: TestTableStandard | null;
}
export const TestTableOrder$Types: Record<keyof TestTableOrder, string> = {
    subsequent_table_type: \\"test_table_standard\\"
};
export interface TestTableStandard<TJsonbTest = SerializableValueType> {
    arr_test: string[] | null;
    domain_test: string | null;
    enum_arr_test: TestTypeEnum[] | null;
    enum_test: TestTypeEnum;
    id: number;
    jsonb_test: MapToSerializable<TJsonbTest> | null;
}
export interface TestTableStandard$Insert<TJsonbTest = SerializableValueType> {
    arr_test?: string[] | null;
    domain_test?: string | null;
    enum_arr_test?: TestTypeEnum[] | null;
    enum_test: TestTypeEnum;
    id?: number;
    jsonb_test?: MapToSerializable<TJsonbTest> | null;
}
export const TestTableStandard$Types: Record<keyof TestTableStandard, string> = {
    arr_test: \\"text\\",
    domain_test: \\"text\\",
    enum_arr_test: \\"test_type_enum\\",
    enum_test: \\"test_type_enum\\",
    id: \\"int4\\",
    jsonb_test: \\"jsonb\\"
};
export interface TestTableTypes {
    id: string;
    table_arr_test: TestTableStandard[];
    table_test: TestTableStandard | null;
}
export interface TestTableTypes$Insert {
    id: string;
    table_arr_test?: TestTableStandard[];
    table_test?: TestTableStandard | null;
}
export const TestTableTypes$Types: Record<keyof TestTableTypes, string> = {
    id: \\"uuid\\",
    table_arr_test: \\"test_table_standard\\",
    table_test: \\"test_table_standard\\"
};
"
`;
