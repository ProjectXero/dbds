// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`QueryBuilder clause generators groupBy accepts a list of column names as an array of strings 1`] = `
Object {
  "sql": "GROUP BY \\"any_table\\".\\"a\\", \\"any_table\\".\\"b\\", \\"any_table\\".\\"c\\"",
  "type": "SLONIK_TOKEN_SQL",
  "values": Array [],
}
`;

exports[`QueryBuilder clause generators groupBy accepts a mix of different types 1`] = `
Object {
  "sql": "GROUP BY \\"any_table\\".\\"a\\", \\"b\\", c, \\"any_table\\".\\"d\\", \\"e\\", f",
  "type": "SLONIK_TOKEN_SQL",
  "values": Array [],
}
`;

exports[`QueryBuilder clause generators groupBy accepts a single column name as a string 1`] = `
Object {
  "sql": "GROUP BY \\"any_table\\".\\"a\\"",
  "type": "SLONIK_TOKEN_SQL",
  "values": Array [],
}
`;

exports[`QueryBuilder clause generators groupBy accepts a single column name as an identifier 1`] = `
Object {
  "sql": "GROUP BY \\"column\\"",
  "type": "SLONIK_TOKEN_SQL",
  "values": Array [],
}
`;

exports[`QueryBuilder clause generators groupBy accepts a single column name as arbitrary sql 1`] = `
Object {
  "sql": "GROUP BY anything i want!",
  "type": "SLONIK_TOKEN_SQL",
  "values": Array [],
}
`;

exports[`QueryBuilder clause generators having accepts a list of expressions 1`] = `
Object {
  "sql": "HAVING (true AND false AND more raw expressions etc.)",
  "type": "SLONIK_TOKEN_SQL",
  "values": Array [],
}
`;

exports[`QueryBuilder clause generators having accepts a simple object 1`] = `
Object {
  "sql": "HAVING (\\"any_table\\".\\"id\\" = $1)",
  "type": "SLONIK_TOKEN_SQL",
  "values": Array [
    1,
  ],
}
`;

exports[`QueryBuilder clause generators having handles multiple values for a column 1`] = `
Object {
  "sql": "HAVING (\\"any_table\\".\\"id\\" = ANY($1::these[]))",
  "type": "SLONIK_TOKEN_SQL",
  "values": Array [
    Array [
      1,
      2,
      3,
    ],
  ],
}
`;

exports[`QueryBuilder clause generators having lets you pass in a raw expression 1`] = `
Object {
  "sql": "HAVING true",
  "type": "SLONIK_TOKEN_SQL",
  "values": Array [],
}
`;

exports[`QueryBuilder clause generators having produces a valid clause with no conditions 1`] = `
Object {
  "sql": "HAVING true",
  "type": "SLONIK_TOKEN_SQL",
  "values": Array [],
}
`;

exports[`QueryBuilder clause generators having produces a valid clause with no conditions 2`] = `
Object {
  "sql": "HAVING true",
  "type": "SLONIK_TOKEN_SQL",
  "values": Array [],
}
`;

exports[`QueryBuilder clause generators having sanely handles output from the \`and\` and \`or\` utilities 1`] = `
Object {
  "sql": "HAVING ((\\"any_table\\".\\"id\\" = $1 AND \\"any_table\\".\\"name\\" = $2) OR (\\"any_table\\".\\"id\\" = $3 AND \\"any_table\\".\\"name\\" = $4))",
  "type": "SLONIK_TOKEN_SQL",
  "values": Array [
    1,
    "asdf",
    2,
    "wow",
  ],
}
`;

exports[`QueryBuilder clause generators having uses AND for multiple columns in a simple object 1`] = `
Object {
  "sql": "HAVING (\\"any_table\\".\\"id\\" = $1 AND \\"any_table\\".\\"name\\" = $2)",
  "type": "SLONIK_TOKEN_SQL",
  "values": Array [
    1,
    "Bob",
  ],
}
`;

exports[`QueryBuilder clause generators limit can accept arbitrary sql 1`] = `
Object {
  "sql": "LIMIT anything, thanks",
  "type": "SLONIK_TOKEN_SQL",
  "values": Array [],
}
`;

exports[`QueryBuilder clause generators limit can create a LIMIT <number> clause 1`] = `
Object {
  "sql": "LIMIT $1",
  "type": "SLONIK_TOKEN_SQL",
  "values": Array [
    1,
  ],
}
`;

exports[`QueryBuilder clause generators limit can create a LIMIT ALL clause 1`] = `
Object {
  "sql": "LIMIT ALL",
  "type": "SLONIK_TOKEN_SQL",
  "values": Array [],
}
`;

exports[`QueryBuilder clause generators limit can create an offset clause with limit 1`] = `
Object {
  "sql": "LIMIT $1 OFFSET $2",
  "type": "SLONIK_TOKEN_SQL",
  "values": Array [
    1,
    1,
  ],
}
`;

exports[`QueryBuilder clause generators limit can create an offset clause with limit 2`] = `
Object {
  "sql": "LIMIT ALL OFFSET $1",
  "type": "SLONIK_TOKEN_SQL",
  "values": Array [
    1,
  ],
}
`;

exports[`QueryBuilder clause generators orderBy accepts a list of column names as an array of strings 1`] = `
Object {
  "sql": "ORDER BY \\"any_table\\".\\"a\\", \\"any_table\\".\\"b\\", \\"any_table\\".\\"c\\"",
  "type": "SLONIK_TOKEN_SQL",
  "values": Array [],
}
`;

exports[`QueryBuilder clause generators orderBy accepts a mix of different types 1`] = `
Object {
  "sql": "ORDER BY \\"any_table\\".\\"a\\", \\"b\\", c, \\"any_table\\".\\"d\\", \\"e\\", f",
  "type": "SLONIK_TOKEN_SQL",
  "values": Array [],
}
`;

exports[`QueryBuilder clause generators orderBy accepts a single column name as a string 1`] = `
Object {
  "sql": "ORDER BY \\"any_table\\".\\"a\\"",
  "type": "SLONIK_TOKEN_SQL",
  "values": Array [],
}
`;

exports[`QueryBuilder clause generators orderBy accepts a single column name as an identifier 1`] = `
Object {
  "sql": "ORDER BY \\"column\\"",
  "type": "SLONIK_TOKEN_SQL",
  "values": Array [],
}
`;

exports[`QueryBuilder clause generators orderBy accepts a single column name as arbitrary sql 1`] = `
Object {
  "sql": "ORDER BY anything i want!",
  "type": "SLONIK_TOKEN_SQL",
  "values": Array [],
}
`;

exports[`QueryBuilder clause generators orderBy can use order tuples 1`] = `
Object {
  "sql": "ORDER BY \\"any_table\\".\\"a\\" DESC, \\"any_table\\".\\"b\\", c ASC",
  "type": "SLONIK_TOKEN_SQL",
  "values": Array [],
}
`;

exports[`QueryBuilder clause generators where accepts a list of expressions 1`] = `
Object {
  "sql": "WHERE (true AND false AND more raw expressions etc.)",
  "type": "SLONIK_TOKEN_SQL",
  "values": Array [],
}
`;

exports[`QueryBuilder clause generators where accepts a simple object 1`] = `
Object {
  "sql": "WHERE (\\"any_table\\".\\"id\\" = $1)",
  "type": "SLONIK_TOKEN_SQL",
  "values": Array [
    1,
  ],
}
`;

exports[`QueryBuilder clause generators where accepts complex conditions 1`] = `
Object {
  "sql": "WHERE (\\"any_table\\".\\"id\\" = $1 AND \\"any_table\\".\\"nullable\\" IS NULL AND (\\"any_table\\".\\"stringOrNumber\\" = $2 OR \\"any_table\\".\\"stringOrNumber\\" IS NULL))",
  "type": "SLONIK_TOKEN_SQL",
  "values": Array [
    1,
    "a",
  ],
}
`;

exports[`QueryBuilder clause generators where correctly handles Date objects 1`] = `
Object {
  "sql": "WHERE (\\"any_table\\".\\"date\\" = $1)",
  "type": "SLONIK_TOKEN_SQL",
  "values": Array [
    "2020-11-30T05:00:00.000Z",
  ],
}
`;

exports[`QueryBuilder clause generators where enables custom operators through use of sql tokens 1`] = `
Object {
  "sql": "WHERE (\\"any_table\\".\\"id\\" > 1)",
  "type": "SLONIK_TOKEN_SQL",
  "values": Array [],
}
`;

exports[`QueryBuilder clause generators where handles multiple values for a column 1`] = `
Object {
  "sql": "WHERE (\\"any_table\\".\\"id\\" = ANY($1::these[]))",
  "type": "SLONIK_TOKEN_SQL",
  "values": Array [
    Array [
      1,
      2,
      3,
    ],
  ],
}
`;

exports[`QueryBuilder clause generators where handles null lookups correctly 1`] = `
Object {
  "sql": "WHERE (\\"any_table\\".\\"nullable\\" IS NULL)",
  "type": "SLONIK_TOKEN_SQL",
  "values": Array [],
}
`;

exports[`QueryBuilder clause generators where lets you pass in a raw expression 1`] = `
Object {
  "sql": "WHERE true",
  "type": "SLONIK_TOKEN_SQL",
  "values": Array [],
}
`;

exports[`QueryBuilder clause generators where produces a valid clause with no conditions 1`] = `
Object {
  "sql": "WHERE true",
  "type": "SLONIK_TOKEN_SQL",
  "values": Array [],
}
`;

exports[`QueryBuilder clause generators where produces a valid clause with no conditions 2`] = `
Object {
  "sql": "WHERE true",
  "type": "SLONIK_TOKEN_SQL",
  "values": Array [],
}
`;

exports[`QueryBuilder clause generators where sanely handles output from the \`and\` and \`or\` utilities 1`] = `
Object {
  "sql": "WHERE ((\\"any_table\\".\\"id\\" = $1 AND \\"any_table\\".\\"name\\" = $2) OR (\\"any_table\\".\\"id\\" = $3 AND \\"any_table\\".\\"name\\" = $4))",
  "type": "SLONIK_TOKEN_SQL",
  "values": Array [
    1,
    "asdf",
    2,
    "wow",
  ],
}
`;

exports[`QueryBuilder clause generators where uses AND for multiple columns in a simple object 1`] = `
Object {
  "sql": "WHERE (\\"any_table\\".\\"id\\" = $1 AND \\"any_table\\".\\"name\\" = $2)",
  "type": "SLONIK_TOKEN_SQL",
  "values": Array [
    1,
    "Bob",
  ],
}
`;

exports[`QueryBuilder core query builders count can use where clauses 1`] = `
Object {
  "sql": "
      SELECT COUNT(*)
      FROM \\"any_table\\"
      WHERE (\\"any_table\\".\\"id\\" = $1)
    ",
  "type": "SLONIK_TOKEN_SQL",
  "values": Array [
    1,
  ],
}
`;

exports[`QueryBuilder core query builders count creates a count query 1`] = `
Object {
  "sql": "
      SELECT COUNT(*)
      FROM \\"any_table\\"
      
    ",
  "type": "SLONIK_TOKEN_SQL",
  "values": Array [],
}
`;

exports[`QueryBuilder core query builders delete builds clauses correctly 1`] = `
Object {
  "sql": "
      WITH \\"delete_rows\\" AS (
        
      DELETE FROM \\"any_table\\"
      WHERE (\\"any_table\\".\\"id\\" = $1)
      RETURNING *
    
      ) SELECT *
        FROM \\"delete_rows\\"
        GROUP BY \\"any_table\\".\\"id\\"
        ORDER BY \\"any_table\\".\\"id\\"
        HAVING (\\"any_table\\".\\"id\\" = $2)
        
    ",
  "type": "SLONIK_TOKEN_SQL",
  "values": Array [
    1,
    1,
  ],
}
`;

exports[`QueryBuilder core query builders delete can be forced to delete everything 1`] = `
Object {
  "sql": "
      WITH \\"delete_rows\\" AS (
        
      DELETE FROM \\"any_table\\"
      
      RETURNING *
    
      ) SELECT *
        FROM \\"delete_rows\\"
        
        
        
        
    ",
  "type": "SLONIK_TOKEN_SQL",
  "values": Array [],
}
`;

exports[`QueryBuilder core query builders delete doesn't let you delete everything without being explicit 1`] = `"Implicit deletion of everything is not allowed. To delete everything, please pass \`true\` or include options."`;

exports[`QueryBuilder core query builders insert accepts a basic object 1`] = `
Object {
  "sql": "
      WITH \\"insert_rows\\" AS (
        
      INSERT INTO \\"any_table\\" (\\"id\\", \\"name\\", \\"nullable\\", \\"stringOrNumber\\")
      SELECT *
      FROM jsonb_to_recordset($1) AS (\\"id\\" these, \\"name\\" types, \\"nullable\\" not, \\"stringOrNumber\\" here)
      RETURNING *
    
      ) SELECT *
        FROM \\"insert_rows\\"
        
        
        
        
    ",
  "type": "SLONIK_TOKEN_SQL",
  "values": Array [
    "[{\\"id\\":1,\\"name\\":\\"name\\",\\"nullable\\":null,\\"stringOrNumber\\":1}]",
  ],
}
`;

exports[`QueryBuilder core query builders insert accepts many basic objects 1`] = `
Object {
  "sql": "
      WITH \\"insert_rows\\" AS (
        
      INSERT INTO \\"any_table\\" (\\"id\\", \\"name\\", \\"nullable\\", \\"stringOrNumber\\")
      SELECT *
      FROM jsonb_to_recordset($1) AS (\\"id\\" these, \\"name\\" types, \\"nullable\\" not, \\"stringOrNumber\\" here)
      RETURNING *
    
      ) SELECT *
        FROM \\"insert_rows\\"
        
        
        
        
    ",
  "type": "SLONIK_TOKEN_SQL",
  "values": Array [
    "[{\\"id\\":1,\\"name\\":\\"name\\",\\"nullable\\":null,\\"stringOrNumber\\":1},{\\"stringOrNumber\\":\\"wat\\",\\"id\\":2,\\"name\\":\\"name\\",\\"nullable\\":\\"hi\\"}]",
  ],
}
`;

exports[`QueryBuilder core query builders insert allows a single object with raw SQL values 1`] = `
Object {
  "sql": "
      WITH \\"insert_rows\\" AS (
        
      INSERT INTO \\"any_table\\" (\\"id\\", \\"name\\")
      VALUES ($1, DEFAULT)
      RETURNING *
    
      ) SELECT *
        FROM \\"insert_rows\\"
        
        
        
        
    ",
  "type": "SLONIK_TOKEN_SQL",
  "values": Array [
    1,
  ],
}
`;

exports[`QueryBuilder core query builders insert allows multiple objects with a mix of value types 1`] = `
Object {
  "sql": "
      WITH \\"insert_rows\\" AS (
        
      INSERT INTO \\"any_table\\" (\\"id\\", \\"name\\")
      VALUES ($1, $2), ($3, DEFAULT)
      RETURNING *
    
      ) SELECT *
        FROM \\"insert_rows\\"
        
        
        
        
    ",
  "type": "SLONIK_TOKEN_SQL",
  "values": Array [
    1,
    "anything",
    2,
  ],
}
`;

exports[`QueryBuilder core query builders insert allows multiple objects with raw SQL values 1`] = `
Object {
  "sql": "
      WITH \\"insert_rows\\" AS (
        
      INSERT INTO \\"any_table\\" (\\"id\\", \\"name\\")
      VALUES ($1, DEFAULT), ($2, DEFAULT)
      RETURNING *
    
      ) SELECT *
        FROM \\"insert_rows\\"
        
        
        
        
    ",
  "type": "SLONIK_TOKEN_SQL",
  "values": Array [
    1,
    2,
  ],
}
`;

exports[`QueryBuilder core query builders insert correctly inserts Date objects as ISO8601 strings 1`] = `
Object {
  "sql": "
      WITH \\"insert_rows\\" AS (
        
      INSERT INTO \\"any_table\\" (\\"id\\", \\"name\\", \\"nullable\\", \\"stringOrNumber\\", \\"date\\")
      SELECT *
      FROM jsonb_to_recordset($1) AS (\\"id\\" these, \\"name\\" types, \\"nullable\\" not, \\"stringOrNumber\\" here, \\"date\\" date)
      RETURNING *
    
      ) SELECT *
        FROM \\"insert_rows\\"
        
        
        
        
    ",
  "type": "SLONIK_TOKEN_SQL",
  "values": Array [
    "[{\\"id\\":1,\\"name\\":\\"name\\",\\"nullable\\":null,\\"stringOrNumber\\":1,\\"date\\":\\"2020-11-30T05:00:00.000Z\\"}]",
  ],
}
`;

exports[`QueryBuilder core query builders select can select for update 1`] = `
Object {
  "sql": "
      SELECT *
      FROM \\"any_table\\"
      
      
      
      
      FOR UPDATE
    ",
  "type": "SLONIK_TOKEN_SQL",
  "values": Array [],
}
`;

exports[`QueryBuilder core query builders select can select for update of another table 1`] = `
Object {
  "sql": "
      SELECT *
      FROM \\"any_table\\"
      
      
      
      
      FOR UPDATE OF \\"another_table\\"
    ",
  "type": "SLONIK_TOKEN_SQL",
  "values": Array [],
}
`;

exports[`QueryBuilder core query builders select can select for update of multiple other tables 1`] = `
Object {
  "sql": "
      SELECT *
      FROM \\"any_table\\"
      
      
      
      
      FOR UPDATE OF \\"table\\", \\"another_table\\", \\"more_tables\\"
    ",
  "type": "SLONIK_TOKEN_SQL",
  "values": Array [],
}
`;

exports[`QueryBuilder core query builders select selects everything by default 1`] = `
Object {
  "sql": "
      SELECT *
      FROM \\"any_table\\"
      
      
      
      
      
    ",
  "type": "SLONIK_TOKEN_SQL",
  "values": Array [],
}
`;

exports[`QueryBuilder core query builders select supports limits 1`] = `
Object {
  "sql": "
      SELECT *
      FROM \\"any_table\\"
      
      
      
      LIMIT $1
      
    ",
  "type": "SLONIK_TOKEN_SQL",
  "values": Array [
    10,
  ],
}
`;

exports[`QueryBuilder core query builders update accepts a basic object 1`] = `
Object {
  "sql": "
      WITH \\"update_rows\\" AS (
        
      UPDATE \\"any_table\\"
      SET \\"id\\" = $1, \\"name\\" = $2, \\"nullable\\" = $3, \\"optional\\" = $4, \\"optionallyNullable\\" = $5, \\"stringOrNumber\\" = $6
      
      RETURNING *
    
      ) SELECT *
        FROM \\"update_rows\\"
        
        
        
        
    ",
  "type": "SLONIK_TOKEN_SQL",
  "values": Array [
    5,
    "any",
    null,
    "asdf",
    null,
    5,
  ],
}
`;

exports[`QueryBuilder core query builders update accepts raw sql values 1`] = `
Object {
  "sql": "
      WITH \\"update_rows\\" AS (
        
      UPDATE \\"any_table\\"
      SET \\"name\\" = anything i want
      
      RETURNING *
    
      ) SELECT *
        FROM \\"update_rows\\"
        
        
        
        
    ",
  "type": "SLONIK_TOKEN_SQL",
  "values": Array [],
}
`;

exports[`QueryBuilder core query builders update correctly updates Date objects as ISO8601 strings 1`] = `
Object {
  "sql": "
      WITH \\"update_rows\\" AS (
        
      UPDATE \\"any_table\\"
      SET \\"date\\" = $1
      
      RETURNING *
    
      ) SELECT *
        FROM \\"update_rows\\"
        
        
        
        
    ",
  "type": "SLONIK_TOKEN_SQL",
  "values": Array [
    "2020-11-30T05:00:00.000Z",
  ],
}
`;
